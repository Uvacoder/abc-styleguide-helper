{"version":3,"sources":["icons/space.svg","icons/frame-ratio.svg","icons/frame-y.svg","icons/text-increment.svg","icons/unit.svg","utilities.js","components/setting.js","components/settings.js","components/demo-email/demo-email.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","randomNumber","min","max","full","num","Math","random","rand","round","Number","EPSILON","setProperty","property","value","document","documentElement","style","fonts","buttonIsRound","getRandomObject","randomFontsPosition","length","fontFamily","textSizeIncrement","baseTextSize","textFrameRatio","textFrameY","unit","spaceIncrement","accentHue","accentSaturation","greySaturation","radius","fieldBorderWidth","buttonRound","numberToUnit","number","Setting","label","id","illustration","settingType","inputType","onChange","valueUnit","step","switchIsActive","children","props","className","alt","src","htmlFor","type","undefined","checked","Settings","setFontFamily","setTextSizeIncrement","setBaseTextSize","setTextFrameRatio","setTextFrameY","setUnit","setSpaceIncrement","setAccentHue","setAccentSaturation","accentLightness","setAccentLightness","setGreySaturation","setRadius","setFieldBorderWidth","setButtonRound","darkMode","setDarkMode","handleRandomize","textIncrement","e","target","unitSvg","space","opacity","frameY","frameRatio","onClick","emails","name","handle","content","menuItems","DemoEmail","map","menuItem","index","key","placeholder","email","initialState","App","useState","useEffect","querySelector","classList","add","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62d5c05b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space.1f2e5cae.svg\";","module.exports = __webpack_public_path__ + \"static/media/frame-ratio.59be05c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/frame-y.84c17281.svg\";","module.exports = __webpack_public_path__ + \"static/media/text-increment.8c93b195.svg\";","module.exports = __webpack_public_path__ + \"static/media/unit.3d53f8e8.svg\";","export const randomNumber = (min, max, full) => {\n  const num = Math.random() * (max - min) + min\n  let rand = min + Math.random() * (max - min);\n  if (full === 'full') {\n    return Math.round(rand)\n  }\n  return Math.round((num + Number.EPSILON) * 100) / 100\n}\n\nexport const setProperty = (property, value) => {\n  document.documentElement.style.setProperty(`--${property}`, value);\n}\n\nexport const getProperty = (property) => {\n  getComputedStyle(document.documentElement).getPropertyValue(`--${property}`);\n}\n\nexport const fonts = [\n  'system-ui',\n  'IBM Plex Sans',\n  'futura, sans-serif',\n  'Roboto Mono',\n  'Nunito',\n  'helvetica, sans-serif',\n  'Merriweather',\n  'Work Sans',\n]\n\nconst buttonIsRound = [true, false, false, false]\n\nexport const getRandomObject = () => {\n  const randomFontsPosition = randomNumber(0, fonts.length-1, 'full')\n  return {\n    fontFamily: fonts[randomFontsPosition],\n    textSizeIncrement: randomNumber(1.2, 1.4),\n    baseTextSize: randomNumber(0.875, 1.1),\n    textFrameRatio: randomNumber(1.2, 3),\n    textFrameY: randomNumber(0.4, 1),\n    unit: randomNumber(0.4, 0.8),\n    spaceIncrement: randomNumber(1.5, 1.8),\n    accentHue: randomNumber(0, 360, 'full'),\n    accentSaturation: randomNumber(0, 100, 'full'),\n    greySaturation: randomNumber(0, 10, 'full'),\n    radius: randomNumber(0, 0.4),\n    fieldBorderWidth: randomNumber(1, 3, 'full'),\n    buttonRound: buttonIsRound[randomNumber(0, 3, 'full')],\n  }\n}\n\nexport const numberToUnit = (number, unit) => `${number}${unit}`","import React from 'react'\n\nconst Setting = ({\n  label,\n  id,\n  illustration,\n  settingType,\n  inputType,\n  value,\n  onChange,\n  valueUnit,\n  step,\n  children,\n  switchIsActive,\n  ...props\n}) => {\n  return (\n    <div\n      className=\"settingWrapper\"\n      style={props.max && {\n        '--value': `${100-(props.max - value)/(props.max - props.min)*100}%`\n      }}>\n      {illustration && (\n        <div className=\"settingIllustrationSection\">\n          <img alt=\"\" src={illustration} className=\"settingIllustration\"/>\n        </div>\n      )}\n      \n\n      {settingType === \"input\" && (\n        <>\n          <label className=\"settingLabel\" htmlFor={id}>\n            {label}\n          </label>\n          <input\n            id={id}\n            type={inputType}\n            value={value}\n            onChange={onChange}\n            step={step}\n            className={inputType === \"text\" ? 'settingTextInput' : undefined}\n            {...props}\n          />\n          {inputType === \"range\" && (\n            <div className=\"settingNumberInputWrapper\">\n              <input\n                id={id}\n                className=\"settingTextInput settingTextInputSmall\"\n                type=\"number\"\n                value={value}\n                onChange={onChange}\n                step={step}\n              />\n              <div className=\"settingNumberUnit\">\n                {valueUnit}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {settingType === \"switch\" && (\n        <div className=\"switchSettingWrapper\">\n          <label className=\"switchTrack\">\n            <input id={id} type=\"checkbox\" checked={switchIsActive} onChange={onChange} />\n            <div className=\"switchKnob\"></div>\n          </label>\n          <label className=\"settingLabel\" htmlFor={id}>\n            {label}\n          </label>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Setting","import React from 'react'\nimport Setting from './setting';\nimport '../settings.css';\nimport '../slider.css';\nimport space from '../icons/space.svg'\nimport frameRatio from '../icons/frame-ratio.svg'\nimport frameY from '../icons/frame-y.svg'\nimport textIncrement from '../icons/text-increment.svg'\nimport unitSvg from '../icons/unit.svg'\n\nconst Settings = ({\n  fontFamily,\n  setFontFamily,\n  textSizeIncrement,\n  setTextSizeIncrement,\n  baseTextSize,\n  setBaseTextSize,\n  textFrameRatio,\n  setTextFrameRatio,\n  textFrameY,\n  setTextFrameY,\n  spaceIncrement,\n  unit,\n  setUnit,\n  setSpaceIncrement,\n  accentHue,\n  setAccentHue,\n  accentSaturation,\n  setAccentSaturation,\n  accentLightness,\n  setAccentLightness,\n  greySaturation,\n  setGreySaturation,\n  radius,\n  setRadius,\n  fieldBorderWidth,\n  setFieldBorderWidth,\n  buttonRound,\n  setButtonRound,\n  darkMode,\n  setDarkMode,\n\n  handleRandomize,\n}) => {\n  \n  return (  \n    <div className=\"settingsWrapper\">\n      <div className=\"settingsGrid\">\n        <div className=\"settingsGridColumn\">\n          <h2 className=\"settingsGridColumnTitle\">\n            Typography\n          </h2>\n          <Setting\n            label=\"Text increment\"\n            illustration={textIncrement}\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"textSizeIncrement\"\n            value={textSizeIncrement}\n            onChange={(e) => setTextSizeIncrement(e.target.value)}\n            min={1}\n            max={2}\n            step={0.01}\n            valueUnit=\"ratio\"\n          />\n          <Setting\n            label=\"Base size\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"baseTextSize\"\n            value={baseTextSize}\n            onChange={(e) => setBaseTextSize(e.target.value)}\n            min={0.8}\n            max={2}\n            step={0.01}\n            valueUnit=\"rem\"\n          />\n          <Setting\n            label=\"Font\"\n            settingType=\"input\"\n            inputType=\"text\"\n            id=\"fontFamily\"\n            value={fontFamily}\n            onChange={(e) => setFontFamily(e.target.value)}\n          />\n        </div>\n        <div className=\"settingsGridColumn\">\n          <h2 className=\"settingsGridColumnTitle\">\n            Spacing\n          </h2>\n          <Setting\n            label=\"Unit\"\n            illustration={unitSvg}\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"unit\"\n            value={unit}\n            onChange={(e) => setUnit(e.target.value)}\n            min={0.4}\n            max={0.8}\n            step={0.01}\n            valueUnit=\"rem\"\n          />\n          <Setting\n            label=\"Space increment\"\n            illustration={space}\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"spaceIncrement\"\n            value={spaceIncrement}\n            onChange={(e) => setSpaceIncrement(e.target.value)}\n            min={1}\n            max={2}\n            step={0.01}\n            valueUnit=\"ratio\"\n          />\n        </div>\n        <div className=\"settingsGridColumn\">\n          <h2 className=\"settingsGridColumnTitle\" style={{opacity: 0}}>\n            -\n          </h2>\n          <Setting\n            label=\"Text frame\"\n            illustration={frameY}\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"textFrameY\"\n            value={textFrameY}\n            onChange={(e) => setTextFrameY(e.target.value)}\n            min={0}\n            max={1}\n            step={0.01}\n            valueUnit=\"em\"\n          />\n          <Setting\n            label=\"Button proportion\"\n            illustration={frameRatio}\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"textFrameRatio\"\n            value={textFrameRatio}\n            onChange={(e) => setTextFrameRatio(e.target.value)}\n            min={1}\n            max={3}\n            step={0.01}\n            valueUnit=\"ratio\"\n          />\n        </div>\n        <div className=\"settingsGridColumn\">\n          <h2 className=\"settingsGridColumnTitle\">\n            Color\n          </h2>\n          <Setting\n            label=\"Accent hue\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"accentHue\"\n            value={accentHue}\n            onChange={(e) => setAccentHue(e.target.value)}\n            min={0}\n            max={360}\n            step={1}\n            valueUnit=\"°\"\n          />\n          <Setting\n            label=\"Accent saturation\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"accentSaturation\"\n            value={accentSaturation}\n            onChange={(e) => setAccentSaturation(e.target.value)}\n            min={0}\n            max={100}\n            step={1}\n            valueUnit=\"%\"\n          />\n          <Setting\n            label=\"Accent lightness\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"accentLightness\"\n            value={accentLightness}\n            onChange={(e) => setAccentLightness(e.target.value)}\n            min={0}\n            max={100}\n            step={1}\n            valueUnit=\"%\"\n          />\n        </div>\n        <div className=\"settingsGridColumn\">\n          <h2 className=\"settingsGridColumnTitle\">\n            Layer\n          </h2>\n          <Setting\n            label=\"Radius\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"radius\"\n            value={radius}\n            onChange={(e) => setRadius(e.target.value)}\n            min={0}\n            max={0.5}\n            step={0.01}\n            valueUnit=\"rem\"\n          />\n          <Setting\n            label=\"Field border\"\n            settingType=\"input\"\n            inputType=\"range\"\n            id=\"fieldBorderWidth\"\n            value={fieldBorderWidth}\n            onChange={(e) => setFieldBorderWidth(e.target.value)}\n            min={1}\n            max={3}\n            step={1}\n            valueUnit=\"px\"\n          />\n          <Setting\n            label=\"Round buttons\"\n            settingType=\"switch\"\n            id=\"buttonRound\"\n            switchIsActive={buttonRound}\n            onChange={() => setButtonRound(!buttonRound)}\n          />\n\n        </div>\n        <div className=\"settingsGridColumn triggersColumn\">\n          <Setting\n            label=\"Dark mode\"\n            settingType=\"switch\"\n            id=\"darkMode\"\n            switchIsActive={darkMode}\n            onChange={() => setDarkMode(!darkMode)}\n          />\n          <div className=\"xBorder\" />\n          <div className=\"randomButtonSection\">\n            <button\n              className=\"triggerButton\"\n              onClick={() => handleRandomize()}\n            >\n              Randomize\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Settings","import React from 'react'\nimport './demo-email.css'\n\nconst emails = [\n  { name: 'Brian Dog', handle: '@brian', content: 'This device includes 4 delays that can be patched together in the way that the user wishes, this allows greater control to generate loops and feedback.' },\n  { name: 'Brian Dog', handle: '@brian', content: 'This device includes 4 delays that can be patched together in the way that the user wishes, this allows greater control to generate loops and feedback.' },\n  { name: 'Brian Dog', handle: '@brian', content: 'This device includes 4 delays that can be patched together in the way that the user wishes, this allows greater control to generate loops and feedback.' },\n  { name: 'Brian Dog', handle: '@brian', content: 'This device includes 4 delays that can be patched together in the way that the user wishes, this allows greater control to generate loops and feedback.' },\n]\nconst menuItems = [\n  'Menu item', 'Another', 'Third', 'More'\n]\n\nconst DemoEmail = () => (\n  <div className=\"emailWrapper\">\n    <aside className=\"sidebar\">\n      <div className=\"logo mb-xl\"></div>\n      <button className=\"button button-accent text-l mb-xl\">New</button>\n      {menuItems.map((menuItem, index) => (\n        <div className={index === 1 ? 'menuItem active' : 'menuItem'} key={index}>\n          {menuItem}\n        </div>\n      ))}\n    </aside>\n    <main>\n      <div className=\"searchSection\">\n        <input type=\"text\" className=\"textInput\" placeholder=\"Search\" />\n      </div>\n      <div className=\"post mb-m\">\n        <div className=\"postLeft\">\n          <div className=\"postAvatar\"></div>\n        </div>\n        <div className=\"postMain\">\n          <div className=\"postAuthor\">{emails[3].name}</div>\n          <div className=\"postContent mb-m text-m\">First Steps in React</div>\n          <div className=\"postDate text-s c-bodyDimmed\">6:51 p. m. · 11 jun. 2020</div>\n        </div>\n      </div>\n      <div className=\"post mb-xl\">\n        <div className=\"postLeft\">\n          <div className=\"postAvatar\"></div>\n        </div>\n        <div className=\"postMain\">\n          <div className=\"postAuthor\">{emails[2].name}</div>\n          <div className=\"postContent mb-m text-l\">{emails[2].content}</div>\n          <div className=\"postDate text-s c-bodyDimmed\">6:51 p. m. · 11 jun. 2020</div>\n        </div>\n      </div>\n      <div className=\"emails\">\n        {emails.map((email, index) => (\n          <div className=\"email\" key={index}>\n            <div className=\"listCell\">{email.name}</div>\n            <div className=\"listCell c-bodyDimmed\">{email.content}</div>\n          </div>\n        ))}\n      </div>\n    </main>\n    <aside className=\"detailsPanel\">\n      <div className=\"detailsCard\">\n        <div className=\"text-s mb-m\">{emails[2].name}</div>\n        <div className=\"text-m mb-m\">This device includes 4 delays that can be patched together</div>\n        <div className=\"text-s mb-l c-bodyDimmed\">{emails[2].content}</div>\n        <div className=\"detailsActions\">\n          <button className=\"button mr-s\">Cancel</button>\n          <button className=\"button button-accent\">Save</button>\n        </div>\n      </div>\n\n      <div className=\"mb-m\"></div>\n\n      <div className=\"userCard\">\n        <div className=\"userCardAvatar\"></div>\n        <div className=\"userCardInfo\">\n          <div className=\"userCardName\">{emails[1].name}</div>\n          <div className=\"userCardHandle c-bodyDimmed\">{emails[1].handle}</div>\n        </div>\n        \n        <button className=\"button buttonSmall\">Follow</button>\n      </div>\n    </aside>\n  </div>\n)\n\nexport default DemoEmail","import React, { useState, useEffect } from 'react';\nimport './variables.css';\nimport './utilities.css';\nimport './common.css';\nimport DemoContent from './components/demo-content';\nimport { getRandomObject, setProperty, numberToUnit, fonts } from './utilities';\nimport Settings from './components/settings'\nimport DemoEmail from './components/demo-email/demo-email';\n\nconst initialState = {\n  fontFamily: fonts[0],\n  textSizeIncrement: 1.2,\n  baseTextSize: 0.9,\n  textFrameRatio: 2,\n  textFrameY: 0.7,\n  spaceIncrement: 1.65,\n  unit: 0.5,\n  accentHue: 338,\n  accentSaturation: 54,\n  accentLightness: 50,\n  greySaturation: 10,\n  radius: 0.3,\n  fieldBorderWidth: 2,\n  buttonRound: false,\n  darkMode: false,\n}\n\nfunction App() {\n  const [fontFamily, setFontFamily] = useState(initialState.fontFamily)\n  const [textSizeIncrement, setTextSizeIncrement] = useState(initialState.textSizeIncrement)\n  const [baseTextSize, setBaseTextSize] = useState(initialState.baseTextSize)\n  const [textFrameRatio, setTextFrameRatio] = useState(initialState.textFrameRatio)\n  const [textFrameY, setTextFrameY] = useState(initialState.textFrameY)\n  const [spaceIncrement, setSpaceIncrement] = useState(initialState.spaceIncrement)\n  const [unit, setUnit] = useState(0.5)\n  const [accentHue, setAccentHue] = useState(initialState.accentHue)\n  const [accentSaturation, setAccentSaturation] = useState(initialState.accentSaturation)\n  const [accentLightness, setAccentLightness] = useState(initialState.accentLightness)\n  const [greySaturation, setGreySaturation] = useState(initialState.greySaturation)\n  const [radius, setRadius] = useState(initialState.radius)\n  const [fieldBorderWidth, setFieldBorderWidth] = useState(initialState.fieldBorderWidth)\n  const [buttonRound, setButtonRound] = useState(initialState.buttonRound)\n  const [darkMode, setDarkMode] = useState(initialState.darkMode)\n\n  const handleRandomize = () => {\n    setFontFamily(getRandomObject().fontFamily)\n    setTextSizeIncrement(getRandomObject().textSizeIncrement)\n    setBaseTextSize(getRandomObject().baseTextSize)\n    setTextFrameRatio(getRandomObject().textFrameRatio)\n    setTextFrameY(getRandomObject().textFrameY)\n    setSpaceIncrement(getRandomObject().spaceIncrement)\n    setAccentHue(getRandomObject().accentHue)\n    setAccentSaturation(getRandomObject().accentSaturation)\n    setGreySaturation(getRandomObject().greySaturation)\n    setRadius(getRandomObject().radius)\n    setFieldBorderWidth(getRandomObject().fieldBorderWidth)\n    setButtonRound(getRandomObject().buttonRound)\n  }\n\n  useEffect(() => {\n    setProperty('fontFamily', fontFamily)\n    setProperty('textSizeIncrement', textSizeIncrement)\n    setProperty('baseTextSize', numberToUnit(baseTextSize, 'rem'))\n    setProperty('textFrameRatio', textFrameRatio)\n    setProperty('textFrameY', numberToUnit(textFrameY, 'em'))\n    setProperty('spaceIncrement', spaceIncrement)\n    setProperty('unit', numberToUnit(unit, 'rem'))\n    setProperty('accentHue', accentHue)\n    setProperty('accentSaturation', numberToUnit(accentSaturation, '%'))\n    setProperty('accentLightness', numberToUnit(accentLightness, '%'))\n    setProperty('greySaturation', numberToUnit(greySaturation, '%'))\n    setProperty('radius', numberToUnit(radius, 'rem'))\n    setProperty('fieldBorderWidth', numberToUnit(fieldBorderWidth, 'px'))\n    \n    if(buttonRound) {\n      document.querySelector('body').classList.add('roundButtons');\n    } else {\n      document.querySelector('body').classList.remove('roundButtons');\n    }\n    \n    if(darkMode) {\n      document.querySelector('body').classList.add('darkMode');\n    } else {\n      document.querySelector('body').classList.remove('darkMode');\n    }\n\n  }, [accentHue, accentLightness, accentSaturation, baseTextSize, buttonRound, darkMode, fieldBorderWidth, fontFamily, greySaturation, radius, spaceIncrement, textFrameRatio, textFrameY, textSizeIncrement, unit])\n\n  return (\n    <div>\n      <Settings\n        fontFamily={fontFamily}\n        setFontFamily={setFontFamily}\n        textSizeIncrement={textSizeIncrement}\n        setTextSizeIncrement={setTextSizeIncrement}\n        baseTextSize={baseTextSize}\n        setBaseTextSize={setBaseTextSize}\n        textFrameRatio={textFrameRatio}\n        setTextFrameRatio={setTextFrameRatio}\n        textFrameY={textFrameY}\n        setTextFrameY={setTextFrameY}\n        spaceIncrement={spaceIncrement}\n        unit={unit}\n        setUnit={setUnit}\n        setSpaceIncrement={setSpaceIncrement}\n        accentHue={accentHue}\n        setAccentHue={setAccentHue}\n        accentSaturation={accentSaturation}\n        setAccentSaturation={setAccentSaturation}\n        accentLightness={accentLightness}\n        setAccentLightness={setAccentLightness}\n        greySaturation={greySaturation}\n        setGreySaturation={setGreySaturation}\n        radius={radius}\n        setRadius={setRadius}\n        fieldBorderWidth={fieldBorderWidth}\n        setFieldBorderWidth={setFieldBorderWidth}\n        buttonRound={buttonRound}\n        setButtonRound={setButtonRound}\n        darkMode={darkMode}\n        setDarkMode={setDarkMode}\n\n        handleRandomize={handleRandomize}\n      />\n      {/* <DemoContent /> */}\n      <DemoEmail />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}